class Solution {
public:
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        // Create adjacency list
        unordered_map<int, vector<int>>adj;
        for(auto vec : edges){
            int u = vec[0];
            int v = vec[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        return dfs(adj, 0, -1, hasApple);
    }

    int dfs(unordered_map<int, vector<int>> &adj, int currentChild, int parent, vector<bool>& hasApple){
        int time = 0;

        for(auto child : adj[currentChild]){
            if(child == parent)
                continue;

            int childTime = dfs(adj, child, currentChild, hasApple);

            if(childTime > 0 || hasApple[child])
                time += childTime + 2;
        }
        return time;
    }

};
